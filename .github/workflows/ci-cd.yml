name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

env:
  DOCKER_IMAGE_NAME: spring-api
  DOCKER_REGISTRY: ghcr.io
  VM_HOST: ${{ secrets.VM_HOST }}
  VM_USER: ${{ secrets.VM_USER }}
  VM_PATH: /home/${{ secrets.VM_USER }}/spring_api

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_DB: todolist
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: admin
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'

      - name: Run tests
        run: ./mvnw test
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/todolist
          SPRING_DATASOURCE_USERNAME: postgres
          SPRING_DATASOURCE_PASSWORD: admin

      - name: Build application
        run: ./mvnw clean package -DskipTests

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: spring-api-jar
          path: target/*.jar
          retention-days: 7

  # Job 2: Build and Push Docker Image
  build-docker:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev')
    
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Job 3: Deploy Docker Version via SSH
  deploy-docker:
    name: Deploy Docker Container
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to Docker via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            # Login to GitHub Container Registry
            echo "${{ secrets.GITHUB_TOKEN }}" | docker login ${{ env.DOCKER_REGISTRY }} -u ${{ github.actor }} --password-stdin
            
            # Pull latest image
            docker pull ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:latest
            
            # Stop and remove old container
            docker stop spring-api-container 2>/dev/null || true
            docker rm spring-api-container 2>/dev/null || true
            
            # Create network if not exists
            docker network create spring-network 2>/dev/null || true
            
            # Ensure PostgreSQL is running
            if [ ! "$(docker ps -q -f name=todo-postgres-db)" ]; then
              echo "Starting PostgreSQL container..."
              docker run -d \
                --name todo-postgres-db \
                -e POSTGRES_DB=todolist \
                -e POSTGRES_USER=postgres \
                -e POSTGRES_PASSWORD=admin \
                -p 5432:5432 \
                -v postgres_data:/var/lib/postgresql/data \
                --network spring-network \
                --restart unless-stopped \
                postgres:15
              sleep 10
            else
              echo "PostgreSQL already running"
            fi
            
            # Deploy new container
            docker run -d \
              --name spring-api-container \
              -p 8080:8080 \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://todo-postgres-db:5432/todolist \
              -e SPRING_DATASOURCE_USERNAME=postgres \
              -e SPRING_DATASOURCE_PASSWORD=admin \
              -e SERVER_PORT=8080 \
              -e SPRING_PROFILES_ACTIVE=docker \
              --network spring-network \
              --restart unless-stopped \
              ${{ env.DOCKER_REGISTRY }}/${{ github.repository }}:latest
            
            # Clean up old images
            docker image prune -f
            
            # Verify deployment
            sleep 15
            echo "🔍 Checking container status..."
            docker ps | grep spring-api-container
            echo ""
            echo "📋 Recent logs:"
            docker logs spring-api-container --tail 30
            echo ""
            echo "✅ Deployment complete!"

  # Job 4: Deploy to VM
  deploy-vm:
    name: Deploy to WSL2/VM
    runs-on: ubuntu-latest
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: spring-api-jar
          path: target

      - name: Copy files to VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          source: "target/*.jar,src/main/resources/application*.properties"
          target: ${{ env.VM_PATH }}
          strip_components: 0

      - name: Deploy and restart application on VM
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          key: ${{ secrets.VM_SSH_KEY }}
          script: |
            cd ${{ env.VM_PATH }}
            
            # Stop existing application
            if [ -f spring-api.pid ]; then
              kill $(cat spring-api.pid) || true
              rm spring-api.pid
            fi
            
            # Find the jar file
            JAR_FILE=$(find target -name "spring_api-*.jar" | head -n 1)
            
            # Start application
            nohup java -jar \
              -Dspring.profiles.active=dev \
              -Dserver.port=8081 \
              -Dspring.datasource.url=jdbc:postgresql://localhost:5432/todolist \
              -Dspring.datasource.username=postgres \
              -Dspring.datasource.password=admin \
              $JAR_FILE > application.log 2>&1 &
            
            # Save PID
            echo $! > spring-api.pid
            
            # Wait and verify
            sleep 10
            if ps -p $(cat spring-api.pid) > /dev/null; then
              echo "✅ Application started successfully with PID $(cat spring-api.pid)"
            else
              echo "❌ Application failed to start"
              cat application.log
              exit 1
            fi

  # Job 5: Health Check
  health-check:
    name: Health Check Both Deployments
    runs-on: ubuntu-latest
    needs: [deploy-docker, deploy-vm]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Check Docker deployment
        run: |
          echo "🔍 Checking Docker deployment..."
          for i in {1..10}; do
            if curl -f -s http://${{ secrets.VM_HOST }}:8080/actuator/health; then
              echo "✅ Docker deployment is healthy!"
              exit 0
            fi
            echo "⏳ Waiting for Docker deployment... ($i/10)"
            sleep 10
          done
          echo "❌ Docker deployment health check failed"
          exit 1

      - name: Check VM deployment
        run: |
          echo "🔍 Checking VM deployment..."
          for i in {1..10}; do
            if curl -f -s http://${{ secrets.VM_HOST }}:8081/actuator/health; then
              echo "✅ VM deployment is healthy!"
              exit 0
            fi
            echo "⏳ Waiting for VM deployment... ($i/10)"
            sleep 10
          done
          echo "❌ VM deployment health check failed"
          exit 1

      - name: Notify success
        if: success()
        run: |
          echo "🎉 Both deployments are healthy!"
          echo "📍 Docker: http://${{ secrets.VM_HOST }}:8080"
          echo "📍 VM: http://${{ secrets.VM_HOST }}:8081"

      - name: Notify failure
        if: failure()
        run: |
          echo "❌ Health check failed! Please check the logs."
          exit 1
