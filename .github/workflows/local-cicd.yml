name: Local CI/CD Pipeline

on:
  push:
    branches: [ main, dev ]
  pull_request:
    branches: [ main ]

jobs:
  # Job 1: Build and Test
  build-and-test:
    name: Build and Test
    runs-on: self-hosted
    
    steps:
      - name: Checkout code
        run: |
          echo "🔄 Pulling latest changes..."
          git pull origin main || git fetch origin main && git reset --hard origin/main

      - name: Verify environment
        run: |
          echo "📋 Environment check..."
          java -version
          docker --version
          echo "Current directory: $(pwd)"
          echo "Available space: $(df -h . | tail -1)"

      - name: Make mvnw executable
        run: |
          chmod +x mvnw
          ls -la mvnw

      - name: Run tests
        run: |
          echo "🧪 Running tests..."
          ./mvnw test

      - name: Build application
        run: |
          echo "📦 Building application..."
          ./mvnw clean package -DskipTests
          
          echo "✅ Build completed. JAR files:"
          ls -la target/*.jar

  # Job 2: Deploy to VM (Local)
  deploy-local:
    name: Deploy to Local VM (Port 8081)
    runs-on: self-hosted
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Stop existing local application
        run: |
          echo "🛑 Stopping existing local application..."
          
          # Find and kill any existing Spring Boot process on port 8081
          PID=$(lsof -t -i :8081 2>/dev/null || true)
          if [ ! -z "$PID" ]; then
            echo "Stopping existing application with PID: $PID"
            kill $PID || true
            sleep 5
          fi
          
          # Kill any Java processes that might be running Spring API
          pkill -f "spring_api.*local" || true
          sleep 2
          
          echo "✅ Cleanup completed"

      - name: Deploy new application
        run: |
          echo "🚀 Deploying new application..."
          
          # Find the JAR file
          JAR_FILE=$(find target -name "spring_api-*.jar" | head -n 1)
          
          if [ -z "$JAR_FILE" ]; then
            echo "❌ JAR file not found!"
            exit 1
          fi
          
          echo "📦 Deploying JAR: $JAR_FILE"
          
          # Start application on port 8081 with local profile
          nohup java -jar \
            -Dspring.profiles.active=local \
            -Dserver.port=8081 \
            -Dspring.datasource.url=jdbc:postgresql://localhost:5432/todolist \
            -Dspring.datasource.username=postgres \
            -Dspring.datasource.password=admin \
            "$JAR_FILE" > local-app.log 2>&1 &
          
          # Save PID
          echo $! > local-app.pid
          
          echo "🚀 Application started with PID: $(cat local-app.pid)"

      - name: Verify local deployment
        run: |
          echo "⏳ Waiting for application to start..."
          sleep 20
          
          # Check if process is still running
          if ps -p $(cat local-app.pid) > /dev/null 2>&1; then
            echo "✅ Process is running with PID: $(cat local-app.pid)"
          else
            echo "⚠️ Process may not be running, but continuing..."
            echo "📋 Application logs:"
            tail -20 local-app.log
          fi
          
          # Simple health check - just verify port is listening
          echo "🔍 Checking if port 8081 is active..."
          if lsof -i :8081 >/dev/null 2>&1; then
            echo "✅ Port 8081 is active - local deployment successful!"
          else
            echo "⚠️ Port 8081 not active yet - may need more startup time"
            echo "📋 Recent logs:"
            tail -10 local-app.log
          fi

  # Job 3: Build and Deploy Docker
  build-and-deploy-docker:
    name: Build and Deploy Docker (Port 8080)
    runs-on: self-hosted
    needs: build-and-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Stop existing Docker container
        run: |
          echo "🛑 Stopping existing Docker container..."
          
          # Stop existing containers
          docker stop spring-api-app 2>/dev/null || true
          docker rm spring-api-app 2>/dev/null || true
          
          echo "✅ Docker cleanup completed"

      - name: Build Docker image
        run: |
          echo "🐳 Building Docker image..."
          
          # Build image with current commit
          docker build -t spring-api:$(git rev-parse --short HEAD) .
          docker tag spring-api:$(git rev-parse --short HEAD) spring-api:latest
          
          echo "✅ Docker image built successfully:"
          docker images | grep spring-api

      - name: Deploy Docker container
        run: |
          echo "🚀 Deploying Docker container..."
          
          # Check if PostgreSQL container exists and get its network
          POSTGRES_NETWORK=$(docker inspect spring-api-postgres --format='{{range $net, $config := .NetworkSettings.Networks}}{{$net}}{{end}}' 2>/dev/null || echo "")
          
          if [ -z "$POSTGRES_NETWORK" ]; then
            echo "❌ PostgreSQL container not found! Starting with Docker Compose..."
            # Start PostgreSQL using docker-compose if not running
            docker-compose up -d postgres-db
            sleep 10
            POSTGRES_NETWORK="spring_api_spring-api-network"
          fi
          
          echo "📡 Using network: $POSTGRES_NETWORK"
          
          # Start new container on the same network as PostgreSQL
          if [ "$POSTGRES_NETWORK" = "spring_api_spring-api-network" ]; then
            # Connect to docker-compose network
            docker run -d \
              --name spring-api-app \
              -p 8080:8080 \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://spring-api-postgres:5432/todolist \
              -e SPRING_DATASOURCE_USERNAME=postgres \
              -e SPRING_DATASOURCE_PASSWORD=admin \
              -e SPRING_PROFILES_ACTIVE=docker \
              --network spring_api_spring-api-network \
              --restart unless-stopped \
              spring-api:latest
          else
            # Use localhost connection (fallback)
            docker run -d \
              --name spring-api-app \
              -p 8080:8080 \
              -e SPRING_DATASOURCE_URL=jdbc:postgresql://host.docker.internal:5432/todolist \
              -e SPRING_DATASOURCE_USERNAME=postgres \
              -e SPRING_DATASOURCE_PASSWORD=admin \
              -e SPRING_PROFILES_ACTIVE=docker \
              --restart unless-stopped \
              spring-api:latest
          fi
          
          echo "✅ Docker container started"

      - name: Verify Docker deployment
        run: |
          echo "⏳ Waiting for Docker container to start..."
          sleep 25
          
          # Check container status
          if docker ps | grep -q "spring-api-app"; then
            echo "✅ Docker container is running:"
            docker ps | grep spring-api-app
          else
            echo "⚠️ Docker container may not be running properly"
            echo "📋 Container logs:"
            docker logs spring-api-app --tail 20
          fi
          
          # Simple health check - just verify port is accessible
          echo "🔍 Checking if port 8080 is accessible..."
          if nc -z localhost 8080 2>/dev/null; then
            echo "✅ Port 8080 is accessible - Docker deployment successful!"
          else
            echo "⚠️ Port 8080 not accessible yet - may need more startup time"
            echo "📋 Container status:"
            docker ps -a | grep spring-api-app || echo "Container not found"
          fi