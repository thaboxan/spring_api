name: Docker Build and Push

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          subject-digest: ${{ steps.build.outputs.digest }}
          push-to-registry: true

  test-docker:
    name: Test Docker Image
    runs-on: ubuntu-latest
    needs: build-docker
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Start services with Docker Compose
        run: |
          docker compose up -d postgres-db
          sleep 10
      
      - name: Pull and run backend container
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
          docker run -d \
            --name test-backend \
            --network spring_api_default \
            -e SPRING_PROFILES_ACTIVE=docker \
            -e SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-db:5432/todolist \
            -e SPRING_DATASOURCE_USERNAME=postgres \
            -e SPRING_DATASOURCE_PASSWORD=admin \
            -p 8080:8080 \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:main
      
      - name: Wait for application to start
        run: |
          echo "Waiting for application to be ready..."
          timeout 60 sh -c 'until curl -f http://localhost:8080/actuator/health || curl -f http://localhost:8080/; do sleep 2; done'
      
      - name: Test application endpoint
        run: |
          curl -f http://localhost:8080/ || echo "Root endpoint test"
          curl -f http://localhost:8080/api/todos || echo "API endpoint test"
      
      - name: Show container logs
        if: always()
        run: docker logs test-backend
      
      - name: Cleanup
        if: always()
        run: docker compose down -v
