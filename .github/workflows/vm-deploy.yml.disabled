name: Deploy to VM

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy-to-vm:
    name: Deploy to VM
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: maven
      
      - name: Build JAR
        run: ./mvnw clean package -DskipTests
      
      - name: Upload artifact for deployment
        uses: actions/upload-artifact@v4
        with:
          name: vm-deployment-package
          path: |
            target/*.jar
            src/main/resources/application*.properties
      
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts
        if: ${{ secrets.VM_SSH_KEY != '' }}
      
      - name: Deploy to VM via SSH
        if: ${{ secrets.VM_SSH_KEY != '' }}
        run: |
          # Copy JAR to VM
          scp -i ~/.ssh/id_rsa target/*.jar ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:${{ secrets.VM_DEPLOY_PATH }}/
          
          # Copy properties files
          scp -i ~/.ssh/id_rsa src/main/resources/application*.properties ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }}:${{ secrets.VM_DEPLOY_PATH }}/
          
          # Restart application on VM
          ssh -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            cd ${{ secrets.VM_DEPLOY_PATH }}
            
            # Stop existing application
            if [ -f app.pid ]; then
              kill $(cat app.pid) || true
              rm app.pid
            fi
            
            # Find the JAR file
            JAR_FILE=$(ls -t *.jar | head -n1)
            
            # Start new application
            nohup java -jar $JAR_FILE \
              --spring.config.location=file:./application.properties \
              --server.port=8081 \
              > app.log 2>&1 &
            
            echo $! > app.pid
            
            # Wait and verify
            sleep 10
            if ps -p $(cat app.pid) > /dev/null; then
              echo "Application started successfully"
              curl -f http://localhost:8081/ || echo "Health check endpoint test"
            else
              echo "Failed to start application"
              cat app.log
              exit 1
            fi
          EOF
      
      - name: Deployment notification
        if: ${{ secrets.VM_SSH_KEY == '' }}
        run: |
          echo "::warning::VM deployment skipped - SSH credentials not configured"
          echo "To enable VM deployment, add the following secrets to your repository:"
          echo "  - VM_SSH_KEY: Private SSH key for VM access"
          echo "  - VM_HOST: VM hostname or IP address"
          echo "  - VM_USER: SSH username for VM"
          echo "  - VM_DEPLOY_PATH: Deployment path on VM (e.g., /opt/spring-api)"
      
      - name: Cleanup
        if: always()
        run: rm -f ~/.ssh/id_rsa

  verify-vm-deployment:
    name: Verify VM Deployment
    runs-on: ubuntu-latest
    needs: deploy-to-vm
    if: ${{ secrets.VM_SSH_KEY != '' }}
    
    steps:
      - name: Setup SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VM_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VM_HOST }} >> ~/.ssh/known_hosts
      
      - name: Verify deployment
        run: |
          ssh -i ~/.ssh/id_rsa ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} << 'EOF'
            cd ${{ secrets.VM_DEPLOY_PATH }}
            
            # Check if process is running
            if [ -f app.pid ] && ps -p $(cat app.pid) > /dev/null; then
              echo "✓ Application process is running (PID: $(cat app.pid))"
            else
              echo "✗ Application process is not running"
              exit 1
            fi
            
            # Check application logs
            echo "=== Recent logs ==="
            tail -n 20 app.log
          EOF
      
      - name: Cleanup
        if: always()
        run: rm -f ~/.ssh/id_rsa
